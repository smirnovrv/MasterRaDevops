#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда 
		Объект.Статус 		= Перечисления.Статусы.Вработе;
		Модифицированность 	= Истина;
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.Статусы.Закрыт И Не РольДоступна("НачальникЦеха") Тогда   
		Если Объект.Статус = Перечисления.Статусы.Закрыт И Не РольДоступна("УУ") Тогда	
			ТолькоПросмотр = Истина;
		иначе
			ТолькоПросмотр = Ложь;
		КонецЕсли;	
	Иначе
		ТолькоПросмотр = Ложь;	
	КонецЕсли;
	
	Если (Объект.Статус = Перечисления.Статусы.ПеределкаЗаказа И РольДоступна("Менеджер")) 
		ИЛИ (Объект.Статус = Перечисления.Статусы.ПеределкаЗаказа И РольДоступна("Печатник")) Тогда
		ТолькоПросмотр = Истина;		                                     
	КонецЕсли;
	
	ВидРабот 	=  Объект.ТехническоеЗадание.ВидРабот;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда 
		Объект.Склад = Справочники.Склады.НайтиПоНаименованию("Основной");
		Модифицированность = Истина;
	КонецЕсли;
	
	Элементы.тВидРабот.Заголовок 	= ВидРабот;
	Элементы.ТарифЦеха2.Доступность = Ложь;
	
	Если ВидРабот = Перечисления.ВидыРабот.ЛазернаяРезка 
		или ВидРабот = Перечисления.ВидыРабот.ФрезернаяРезка Тогда 
		Элементы.РежимПечатиРезка.Видимость = Истина;
		Элементы.РежимПечати.Видимость 		= Ложь;
	Иначе 
		Элементы.РежимПечатиРезка.Видимость = Ложь;
		Элементы.РежимПечати.Видимость 		= Истина;
	КонецЕсли;
	
	МассивИменКолонокДляПодсветки = Новый Массив;
	Для каждого Стр из Элементы.РасходМатериала.ПодчиненныеЭлементы Цикл
	    МассивИменКолонокДляПодсветки.Добавить(Стр.Имя);
	КонецЦикла;
	
	ЭлементОформленияГолубой = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияГолубой.Использование = Истина;
	ЭлементОформленияГолубой.Оформление.УстановитьЗначениеПараметра("ЦветФона",  WebЦвета.Розовый);
	
	ЭлементУсловияГолубой = ЭлементОформленияГолубой.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловияГолубой.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РасходМатериала.Остаток");
	ЭлементУсловияГолубой.ПравоеЗначение = 0; 
	ЭлементУсловияГолубой.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;   
	ЭлементУсловияГолубой.Использование  = Истина;
	
	Для каждого ТекЭлемент из МассивИменКолонокДляПодсветки Цикл
	    ОформляемоеПоле      = ЭлементОформленияГолубой.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекЭлемент);
	КонецЦикла;
	
	Если объект.Проведен Тогда 
		Элементы.Номер.ТолькоПросмотр 	= Ложь;
	КонецЕсли;	

	Элементы.Связан.Доступность = РольДоступна("ПолныеПрава");  
		
	Если ЗначениеЗаполнено(объект.ТарифЦеха1) Тогда
		Элементы.ТарифЦеха2.Доступность = Истина;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ТекущиеДанные = Элементы.РасходМатериала.ТекущиеДанные;
	ТекущиеДанные.НомерРулона 	= ВыбранноеЗначение.Рулон;
	ТекущиеДанные.МатериалОсновы= ВыбранноеЗначение.МатериалОсновы;
	ТекущиеДанные.ШиринаРулона 	= ВыбранноеЗначение.Ширина;
	ТекущиеДанные.Остаток 		= ПолучитьОстатокРулона(ВыбранноеЗначение.Рулон);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Для Каждого стр из Объект.СвязанныеНаряды Цикл
		докОбъект = стр.наряд.получитьОбъект();
		докОбъект.СвязанныеНаряды.Очистить();
		докОбъект.СвязанныеНаряды.Загрузить(Объект.СвязанныеНаряды.Выгрузить());
		докОбъект.Связан = Истина;
		докОбъект.записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для каждого стр из Объект.РасходМатериала цикл
		Если ЗначениеЗаполнено(стр.НомерРулона) Тогда 		
				//Проверим материал основы
				СтрукутраДляПроверки = Новый Структура;
				СтрукутраДляПроверки.Вставить("НомерРулона",стр.НомерРулона);
				СтрукутраДляПроверки.Вставить("МатериалОсновы",стр.МатериалОсновы);

				Совпадает = СовпадаетМатериалОсновы(СтрукутраДляПроверки);
				Если Не Совпадает Тогда 
					Сообщение = новый СообщениеПользователю();
					Сообщение.Текст = "Не совпадает материал основы "+стр.НомерРулона;
					Сообщение.Сообщить();
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	табТарифЦеха = 0;
	Для Каждого стр из Объект.РасходМатериала Цикл 
		стр.Остаток = ПолучитьОстатокРулона(стр.НомерРулона);
		Если стр.Остаток<0 Тогда 
			Объект.СодержитОшибки = Истина;	
		иначе
			Объект.СодержитОшибки = Ложь; 	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого стрСостав Из Объект.СоставБригады Цикл
		Если табТарифЦеха = 0 Тогда	
			табТарифЦеха =  стрСостав.Тариф1;
		Иначе
			 Если табТарифЦеха<>стрСостав.Тариф1 Тогда
			 	табТарифЦеха = 0;
			 КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Если Не табТарифЦеха = 0 Тогда
		Объект.ТарифЦеха = табТарифЦеха;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТехническоеЗаданиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ОткрытьФорму("Документ.Заявка.Форма.ФормаДокументаДляЦеха",новый Структура("Ключ",Объект.ТехническоеЗадание));
КонецПроцедуры

&НаКлиенте
Процедура ТарифЦеха1ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(объект.ТарифЦеха1) Тогда
		Элементы.ТарифЦеха2.Доступность = Истина;
	Иначе
		Элементы.ТарифЦеха2.Доступность = Ложь;	
	КонецЕсли;	 
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходМатериала
	&НаКлиенте
Процедура РасходМатериалаНомерРулонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Парам = Новый Структура;
	Парам.Вставить("ДатаДок",Объект.Дата);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораРулонов",Парам, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериалаРасходМатериалаПриИзменении(Элемент)
	РассчитатьКоличествоИзрасходованногоМатериала();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеНаряды
&НаКлиенте
Процедура СвязанныеНарядыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.СвязанныеНаряды.Количество()=0 Тогда 
		ДобавитьПервуюСтроку();
	КонецЕсли;	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	КомандаЗаполнитьНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФИО(Команда)
	ПолучитьСоставБригады();
	
	РассчитатьФЗП_Сервер();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьКоличествоИзрасходованногоМатериала(Команда)
	Если ЭтаФорма.Модифицированность Тогда 
		Записать();
	КонецЕсли;	
	РасчитатьОбщКоличествоИзрасходованногоМатериала();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ПолучитьТарифИзСправочника(Структура)
	
	СправочникТариф = Справочники.ТарифыЦеха.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТарифыЦеха.Ссылка,
		|	ТарифыЦеха.ДатаПрименения КАК ДатаПрименения
		|ИЗ
		|	Справочник.ТарифыЦеха КАК ТарифыЦеха
		|ГДЕ
		|	ТарифыЦеха.КолТехников = &КолТехников
		|	И ТарифыЦеха.КолПечатников = &КолПечатников
		|	И ТарифыЦеха.ВидРаботы = &ВидРаботы
		|	И ТарифыЦеха.ПечатнаяМашина = &ПечатнаяМашина
		|	И ТарифыЦеха.СпособРасчетаТарифа = &СпособРасчетаТарифа
		|	И ТарифыЦеха.Тариф = &Тариф
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПрименения УБЫВ";
	
	Запрос.УстановитьПараметр("КолТехников"			, Структура.СчТехник);
	Запрос.УстановитьПараметр("ПечатнаяМашина"		, Структура.ПечатнаяМашина);
	Запрос.УстановитьПараметр("СпособРасчетаТарифа"	, Структура.СпособРасчетаТарифа);
	Запрос.УстановитьПараметр("КолПечатников"		, Структура.счПечатник);
	Запрос.УстановитьПараметр("ВидРаботы"			, Структура.ВидРабот);
	Запрос.УстановитьПараметр("Тариф"				, Структура.Тариф);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТарифыЦеха.ВидРаботы = &ВидРаботы", "");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТарифыЦеха.ПечатнаяМашина = &ПечатнаяМашина", "");	
			РезультатЗапроса = Запрос.Выполнить();
		КонецЕсли;	
		
		Если РезультатЗапроса.Пустой() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Тариф не найден'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() = Ложь	Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СправочникТариф = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СправочникТариф;
	
КонецФункции

&НаСервере
Процедура КомандаЗаполнитьНаСервере()
	Структура = ПолучитьДанныеДлятарифа();
	Объект.ТарифЦеха1 = ПолучитьТарифИзСправочника(Структура);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРаботников()
	
	Структура = Новый Структура();
	Структура.Вставить("счПечатник", 0);
	Структура.Вставить("счПечатник", 0);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДлятарифа()
	
	Структура = ПолучитьСтруктуруРаботников();
	Структура = ПолучитьКоличествоТехниковПечатников(Структура);
	
	Структура.Вставить("ВидРабот"				, Объект.ТехническоеЗадание.ВидРабот);
	Структура.Вставить("ПечатнаяМашина"			, Объект.ТехническоеЗадание.ПечатнаяМашина);
	Структура.Вставить("ОбщаяПлощадьИзображения", Объект.ТехническоеЗадание.ОбщаяПлощадьИзображения);
	
	Если ЗначениеЗаполнено(Объект.ТехническоеЗадание.ОбщаяПлощадьИзображения) Тогда 
		 Структура.Вставить("СпособРасчетаТарифа"	, Перечисления.СпособыРасчетаТарифов.КвадратныйМетр);		
	Иначе
		 Структура.Вставить("СпособРасчетаТарифа"	, Перечисления.СпособыРасчетаТарифов.МетрПогонный);		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура РассчитатьФЗП_Сервер()
	
	Структура = ПолучитьДанныеДлятарифа();
	
	РассчитатьФЗП_Разработка(Структура);
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьСоставБригады()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СооставБригады.Печатник,
		|	СооставБригады.Техник1,
		|	СооставБригады.Техник2,
		|	СооставБригады.Техник3,
		|	СооставБригады.Период КАК Период
		|ИЗ
		|	РегистрСведений.СооставБригады КАК СооставБригады
		|ГДЕ
		|	СооставБригады.Период <= &НаДату
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";

	Если ЗначениеЗаполнено(Объект.ДатаВыполненияНаряда) Тогда 
		Запрос.УстановитьПараметр("НаДату", КонецДня(Объект.ДатаВыполненияНаряда));
	иначе
		Запрос.УстановитьПараметр("НаДату", КонецДня(Объект.Дата));
	КонецЕсли;

	Результат = Запрос.Выполнить();
	табРезультат = Результат.выгрузить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Объект.СоставБригады.Очистить();
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Печатник) тогда
		новСтрока = объект.СоставБригады.добавить();
		новСтрока.ФИО 			=  ВыборкаДетальныеЗаписи.Печатник;
		новСтрока.Статус 		=  Перечисления.СтатусыРаботников.Печатник;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Техник1) тогда
		новСтрока = объект.СоставБригады.добавить();
		новСтрока.ФИО 			=  ВыборкаДетальныеЗаписи.Техник1;
		новСтрока.Статус 		=  Перечисления.СтатусыРаботников.Техник;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Техник2) тогда
		новСтрока = объект.СоставБригады.добавить();
		новСтрока.ФИО 			=  ВыборкаДетальныеЗаписи.Техник2;
		новСтрока.Статус 		=  Перечисления.СтатусыРаботников.Техник;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Техник3) тогда
		новСтрока = объект.СоставБригады.добавить();
		новСтрока.Статус 		=  Перечисления.СтатусыРаботников.Техник;
	КонецЕсли;
	
КонецПроцедуры	     

&НаСервере
Функция ПолучитьКоличествоТехниковПечатников(Структура)

	счПечатник 	= 0;
	счТехник   	= 0;
	Тариф 		= 0;

	Для Каждого стрТЧ Из Объект.СоставБригады Цикл
		Если стрТЧ.Статус = Перечисления.СтатусыРаботников.Печатник Тогда
			счПечатник = счПечатник + 1;
		ИначеЕсли стрТЧ.Статус = Перечисления.СтатусыРаботников.Техник Тогда
			счТехник = счТехник + 1;
		КонецЕсли;
		Если Тариф = 0 Тогда
			Тариф = стрТЧ.Тариф1;
		КонецЕсли;	
	КонецЦикла;

	Структура.Вставить("счПечатник"	, счПечатник);
	Структура.Вставить("счТехник"	, счТехник);
	Структура.Вставить("Тариф"		, Тариф);
	
	Возврат Структура;
КонецФункции

&НаСервере
Процедура РассчитатьФЗП_Разработка(Структура)	
	
	счПечатник 					= Структура.счПечатник;
	счТехник 					= Структура.счТехник;
	ТЗ_ВидРабот 				= Структура.ВидРабот;
	ТЗ_ПечатнаяМашина 			= Структура.ПечатнаяМашина;
	ТЗ_ОбщаяПлощадьИзображения 	= Структура.ОбщаяПлощадьИзображения;
	
	НаборЗаписей = РегистрыСведений.ТарифЦеха.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КолПечатников.Установить(счПечатник);
	НаборЗаписей.Отбор.КолТехников.Установить(счТехник);
	НаборЗаписей.Отбор.СпособРасчетаТарифа.Установить(Перечисления.СпособыРасчетаТарифов.КвадратныйМетр);

	НаборЗаписей.Прочитать();
	ТаблицаРезультата = НаборЗаписей.Выгрузить();
	ТаблицаРезультата.Сортировать("Период УБЫВ");
	
	Если НаборЗаписей.Количество() = 0 Тогда
		СообщитьТекст 	= "Для печатников: "+счПечатник+", техников: "+счТехник+" нет тарифа";
		Сообщение 		= Новый СообщениеПользователю();
		Сообщение.Текст = СообщитьТекст;
		Сообщение.Сообщить();		
		Возврат;	
	КонецЕсли;	
	
	Тариф 				= ТаблицаРезультата[0].Тариф;
	ПроцентПечатника 	= ТаблицаРезультата[0].ПроцентПечатника;
	ПроцентТехника		= ТаблицаРезультата[0].ПроцентТехника;
	
	ТарифЦеха1          = ТаблицаРезультата[0].СправочникТариф;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ВидРаботы"		, ТЗ_ВидРабот);
	Отбор.Вставить("ПечатнаяМашина"	, ТЗ_ПечатнаяМашина);	
	МассивСтрок = ТаблицаРезультата.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() =0 Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("ВидРаботы"		, ТЗ_ВидРабот);
		МассивСтрок = ТаблицаРезультата.НайтиСтроки(Отбор);
	КонецЕсли;

	Если МассивСтрок.Количество() > 0 Тогда
		ПоследняяДата = Неопределено;
		Для Каждого строкаМассива Из МассивСтрок Цикл
			Если ПоследняяДата 		= Неопределено Тогда
				ПоследняяДата 		= строкаМассива.Период;
				Тариф 				= строкаМассива.Тариф;
				ТарифЦеха1          = строкаМассива.СправочникТариф;
				ПроцентПечатника 	= строкаМассива.ПроцентПечатника;
				ПроцентТехника 		= строкаМассива.ПроцентТехника;
			Иначе
				Если строкаМассива.Период > ПоследняяДата Тогда
					ПоследняяДата 		= строкаМассива.Период;
					Тариф 				= строкаМассива.Тариф;
					ТарифЦеха1          = строкаМассива.СправочникТариф;
					ПроцентПечатника 	= строкаМассива.ПроцентПечатника;
					ПроцентТехника 		= строкаМассива.ПроцентТехника;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	 
	
	Объект.ТарифЦеха 	= Тариф;
	Объект.ТарифЦеха1 	= ТарифЦеха1;
		
	Для Каждого стрТЧ из Объект.СоставБригады Цикл
		Если стрТЧ.Статус = Перечисления.СтатусыРаботников.Печатник Тогда 
			стрТЧ.ПроцентОплаты = ПроцентПечатника;
		ИначеЕсли стрТЧ.Статус = Перечисления.СтатусыРаботников.Техник Тогда 
			стрТЧ.ПроцентОплаты = ПроцентТехника;
		КонецЕсли;
		
		стрТЧ.Тариф1 = Тариф;
		
		Если ЗначениеЗаполнено(ТЗ_ОбщаяПлощадьИзображения) 
			И ТарифЦеха1.СпособРасчетаТарифа = Перечисления.СпособыРасчетаТарифов.КвадратныйМетр Тогда 
			стрТЧ.ФЗП_ПоТарифу  =  ТЗ_ОбщаяПлощадьИзображения*(стрТЧ.Тариф1)*(стрТЧ.ПроцентОплаты/100);
		Иначе 
			стрТЧ.ФЗП_ПоТарифу  = ТЗ_ОбщаяПлощадьИзображения*(стрТЧ.Тариф1)*(стрТЧ.ПроцентОплаты/100);;
		КонецЕсли;
		стрТЧ.ДопФЗП 		= 0; //Заплатка
		стрТЧ.Итого  		=  стрТЧ.ФЗП_ПоТарифу+стрТЧ.ДопФЗП;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОстатокРулона(Рулон)
	  Возврат ОбщегоНазначения.ПолучитьОстатокРулона(Объект.Дата+1,Рулон);
КонецФункции	

&НаКлиенте
Процедура РассчитатьКоличествоИзрасходованногоМатериала()
	ТекущиеДанные = Элементы.РасходМатериала.ТекущиеДанные;
	ТекущиеДанные.КоличествоИзрасходованногоМатериала = ТекущиеДанные.ШиринаРулона*ТекущиеДанные.РасходМатериала;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПервуюСтроку()
	 НоваяСтрока = Объект.СвязанныеНаряды.Добавить();
	 НоваяСтрока.Наряд = Объект.Ссылка;
КонецПроцедуры	

 &НаСервере
Процедура РасчитатьОбщКоличествоИзрасходованногоМатериала()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НарядНаПроизводствоРасходМатериала.КоличествоИзрасходованногоМатериала КАК ОбщаяПлощадьПечатиФакт,
		|	НарядНаПроизводствоРасходМатериала.РасходМатериала КАК РасхМат
		|ИЗ
		|	Документ.НарядНаПроизводство.РасходМатериала КАК НарядНаПроизводствоРасходМатериала
		|ГДЕ
		|	НарядНаПроизводствоРасходМатериала.Ссылка В(&спНарядов)";

	Запрос.УстановитьПараметр("спНарядов", Объект.СвязанныеНаряды.Выгрузить(,"Наряд"));
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	= Результат.Выбрать();
	ОбщаяПлощадьПечатиФакт 	= 0;
	ОбщРасходМатериала 		= 0;  
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 		
		ОбщаяПлощадьПечатиФакт 	= ОбщаяПлощадьПечатиФакт+ВыборкаДетальныеЗаписи.ОбщаяПлощадьПечатиФакт;
		Если ВыборкаДетальныеЗаписи.ОбщаяПлощадьПечатиФакт>0 Тогда //270720
			ОбщРасходМатериала 		= ОбщРасходМатериала+ВыборкаДетальныеЗаписи.РасхМат;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(НарядНаПроизводство.ТехническоеЗадание.ОбщаяПлощадьИзображения) КАК ОбщаяПлощадьИзображения
		|ИЗ
		|	Документ.НарядНаПроизводство КАК НарядНаПроизводство
		|ГДЕ
		|	НарядНаПроизводство.Ссылка В(&Ссылка)";

	Запрос.УстановитьПараметр("Ссылка", Объект.СвязанныеНаряды.Выгрузить(,"Наряд"));

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ОбщаяПлощадьИзображения = ВыборкаДетальныеЗаписи.ОбщаяПлощадьИзображения;  
	
	Для каждого стрСвНаряд из Объект.СвязанныеНаряды цикл
		стрСвНаряд.КоличествоИзрасходованногоМатериала  = стрСвНаряд.Наряд.ТехническоеЗадание.ОбщаяПлощадьИзображения/ОбщаяПлощадьИзображения*ОбщаяПлощадьПечатиФакт;
		Если стрСвНаряд.КоличествоИзрасходованногоМатериала>0 Тогда 
			колИзрасхМатМетрПогон 			= (ОбщРасходМатериала*стрСвНаряд.КоличествоИзрасходованногоМатериала)/ОбщаяПлощадьПечатиФакт;
			стрСвНаряд.КолИзрасходМатериала_МП 	= колИзрасхМатМетрПогон;	
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры	 

&НаСервере
Функция СовпадаетМатериалОсновы(СтрукутраДляПроверки)
	Возврат ОбщегоНазначения.ПроверитьМатериалОсновы(СтрукутраДляПроверки);
КонецФункции

#КонецОбласти

