// @strict-types


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда 		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			//Объект.ВидРабот = Параметры.ЗначениеКопирования.ВидРабот;
		Иначе 	
			Если Параметры.ВидыРабот = "СобственнаяПечать" Тогда 
				Объект.ВидРабот = Перечисления.ВидыРабот.СобственнаяПечать;
			ИначеЕсли Параметры.ВидыРабот = "Изготовление" Тогда 
				Если Параметры.ПодВидыРабот = "Сборка" Тогда  
					Объект.ВидРабот  = Перечисления.ВидыРабот.Сборка;
				ИначеЕсли Параметры.ПодВидыРабот = "ПлотернаяРезка" Тогда                                  
					Объект.ВидРабот  = Перечисления.ВидыРабот.ПлотернаяРезка;
				ИначеЕсли Параметры.ПодВидыРабот = "Ламинация" Тогда  
					Объект.ВидРабот  = Перечисления.ВидыРабот.Ламинация;
				ИначеЕсли Параметры.ПодВидыРабот = "Окраска" Тогда  
					Объект.ВидРабот  = Перечисления.ВидыРабот.Окраска;	
				ИначеЕсли Параметры.ПодВидыРабот = "Резка" Тогда  
					Объект.ВидРабот  = Перечисления.ВидыРабот.Резка;
				КонецЕсли;
			ИначеЕсли Параметры.ВидыРабот = "Монтаж" Тогда  
				Объект.ВидРабот  = Перечисления.ВидыРабот.Монтаж;
			ИначеЕсли Параметры.ВидыРабот = "Доставка" Тогда  
				Объект.ВидРабот  = Перечисления.ВидыРабот.Доставка;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаПлотернаяРезка.Видимость 		= Ложь;
	Элементы.ВидПродукции.Видимость 				= Ложь;
	Элементы.ПечатнаяМашина.Видимость 				= Ложь;
	Элементы.РазрешениеПечати.Видимость 			= Ложь;
	Элементы.ПоляПриПечати.Видимость 				= Ложь;
	Элементы.РасположениеПолей.Видимость			= Ложь;
		
	Если Объект.ВидРабот = Перечисления.ВидыРабот.СобственнаяПечатьНестандартныйРазмер Тогда 
		Элементы.ВидПродукции.Видимость 				= Истина;
		Элементы.ПечатнаяМашина.Видимость 				= Истина;
		Элементы.РазрешениеПечати.Видимость 			= Истина;
		Элементы.ПоляПриПечати.Видимость 				= Истина;
		Элементы.РасположениеПолей.Видимость			= Истина;
		
		//Изм. с переносом элемента
		Элементы.СтраницаПостпечатныеРаботы.Видимость 	= Истина;
		Элементы.ПостпечатныеРаботы.Видимость 			= Истина;
		
		Элементы.ДатаИВремяМонтажа.Видимость            = Ложь;
		Элементы.ДатаИВремяСборки.Видимость 			= Ложь;
	ИначеЕсли Объект.ВидРабот =  Перечисления.ВидыРабот.Сборка Тогда 
		Элементы.ДатаИВремяМонтажа.Видимость            = Ложь;
		Элементы.ДатаИВремяДоставки.Видимость 			= Ложь;
		//Элементы.СтраницаПроизводство.Видимость 		= Ложь; 160622
		Элементы.ДатаИВремяСборки.Видимость 			= Истина;
	ИначеЕсли Объект.ВидРабот = Перечисления.ВидыРабот.ПлотернаяРезка Тогда 
		Элементы.ГруппаПлотернаяРезка.Видимость 		= Истина;
		Если Параметры.Ключ.Пустая() Тогда
			Объект.ВыборкаПлотернаяРезка = Параметры.ВыборкаПлотернаяРезка;
			Объект.МонтажкаПлотернаяРезка= Параметры.МонтажкаПлотернаяРезка;
		КонецЕсли;
		Элементы.ЦветопробаКЗаказу.Видимость 	= Ложь;
		Элементы.ДатаИВремяСборки.Видимость 	= Ложь;
		Элементы.ДатаИВремяДоставки.Видимость 	= Истина;
		Элементы.ДатаИВремяМонтажа.Видимость    = Ложь;
	ИначеЕсли Объект.ВидРабот = Перечисления.ВидыРабот.Ламинация 
		или Объект.ВидРабот = Перечисления.ВидыРабот.Окраска
		или Объект.ВидРабот = Перечисления.ВидыРабот.Доставка
		или Объект.ВидРабот = Перечисления.ВидыРабот.Резка Тогда 
		Элементы.ГруппаПлотернаяРезка.Видимость = Ложь;
		Элементы.ЦветопробаКЗаказу.Видимость 	= Ложь;
		Элементы.ДатаИВремяСборки.Видимость 	= Ложь;
		Элементы.ДатаИВремяДоставки.Видимость 	= Истина;
		Элементы.ДатаИВремяМонтажа.Видимость    = Ложь;
	ИначеЕсли Объект.ВидРабот = Перечисления.ВидыРабот.Монтаж Тогда 
		Элементы.ГруппаПлотернаяРезка.Видимость = Ложь;
		Элементы.ЦветопробаКЗаказу.Видимость 	= Ложь;
		Элементы.ДатаИВремяСборки.Видимость 	= Ложь;
		Элементы.ДатаИВремяДоставки.Видимость 	= Ложь;
		Элементы.ДатаИВремяМонтажа.Видимость    = Истина;	
	КонецЕсли;
	
	ТелКонтактногоЛица = Объект.КонтактноеЛицо.Телефон;
		
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда 
		Объект.Статус 		= Перечисления.Статусы.Вработе;
		Модифицированность 	= Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучениеСписков.ВидовПродукции(Объект.ВидРабот);
КонецПроцедуры

&НаСервере
Процедура ПечатнаяМашинаПриИзмененииНаСервере()
	Если Объект.ПечатнаяМашина.ВидМашины = Перечисления.ВидыПечатныхМашин.Интерьерная Тогда 
		Элементы.РазрешениеПечати.Видимость = Ложь;
	Иначе 
		Элементы.РазрешениеПечати.Видимость = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПечатнаяМашинаПриИзменении(Элемент)
	ПечатнаяМашинаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВертикальИзображенияПриИзменении(Элемент)
	РасчитатьПлощадь();
КонецПроцедуры

Процедура РасчитатьПлощадь()
	Объект.ПлощадьИзображения 	= Объект.ВертикальИзображения*Объект.ГоризонтальИзображения;
	РасчитатьОбщуюПлощадьИзображения();
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтальИзображенияПриИзменении(Элемент)
	РасчитатьПлощадь();
КонецПроцедуры

&НаСервере
Процедура  РасчитатьОбщуюПлощадьИзображения()
	 Объект.ОбщаяПлощадьИзображения = Объект.ПлощадьИзображения*Объект.Тираж
	 	//[+]280822
	*?(Объект.КоличествоСторон=0,1,Объект.КоличествоСторон);
	//[+]280822
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Параметры.Ключ.Пустая() и ЗначениеЗаполнено(ТекущийОбъект.Номер)=Ложь тогда 
		ТекущийОбъект.Номер = ОбщегоНазначенияВызовСервера.СформироватьНомерЗаявки(Неопределено,Неопределено);	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПриСменеСтраницыЗатратыНаСервере()
	
	Затраты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОдерЗаказы.Ссылка КАК РКО,
		|	СУММА(РасходныйКассовыйОдерЗаказы.Сумма) КАК Сумма,
		|	РасходныйКассовыйОдерЗаказы.Ссылка.НаименованиеРасхода КАК НаименованиеРасхода
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.Заказы КАК РасходныйКассовыйОдерЗаказы
		|ГДЕ
		|	РасходныйКассовыйОдерЗаказы.Заявка = &Заявка
		|	И РасходныйКассовыйОдерЗаказы.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходныйКассовыйОдерЗаказы.Ссылка,
		|	РасходныйКассовыйОдерЗаказы.Ссылка.НаименованиеРасхода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрочиеЗатратыЗаказы.Ссылка,
		|	СУММА(ПрочиеЗатратыЗаказы.Сумма),
		|	ПрочиеЗатратыЗаказы.Ссылка.НаименованиеРасхода
		|ИЗ
		|	Документ.ПрочиеЗатраты.Заказы КАК ПрочиеЗатратыЗаказы
		|ГДЕ
		|	ПрочиеЗатратыЗаказы.Заявка = &Заявка
		|	И ПрочиеЗатратыЗаказы.Ссылка.Проведен
		|	И ПрочиеЗатратыЗаказы.Ссылка.ДокументОплаты = ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрочиеЗатратыЗаказы.Ссылка,
		|	ПрочиеЗатратыЗаказы.Ссылка.НаименованиеРасхода";
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		новСтрока = Затраты.Добавить();
		ЗаполнитьЗначенияСвойств(новСтрока,Выборка);
	КонецЦикла;	
	
	Объект.МаржаЗаказа = Объект.Стоимости.Итог("ЦенаДляКлиента")-Затраты.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ПриСменеСтраницыСвязанныеЗаявкиНаСервере()
	
	СвязанныеДокументы.Очистить();	
	//найдем связанную заявку для звязаного заказа
	Если ЗначениеЗаполнено(Объект.СвязанныйЗаказ) Тогда 
		НовСтрока = СвязанныеДокументы.Добавить();
		//Строка связанные с этой заявкой
		НовСтрока.СвязаннаяЗаявка 	= Объект.СвязанныйЗаказ;
		
		поикЗаявка = ПолучитьСвязаннуюЗаявку(Объект.СвязанныйЗаказ);
		Пока поикЗаявка<>Документы.Заявка.ПустаяСсылка() Цикл
			НовСтрока = СвязанныеДокументы.Добавить();
			НовСтрока.СвязаннаяЗаявка 	= поикЗаявка;			
			поикЗаявка = ПолучитьСвязаннуюЗаявку(поикЗаявка);			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвязаннуюЗаявку(Заявка)
	
	СвязаннаяЗаявка = Документы.Заявка.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявка.СвязанныйЗаказ КАК СвязанныйЗаказ
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий(); 
		СвязаннаяЗаявка = ВыборкаДетальныеЗаписи.СвязанныйЗаказ;
	КонецЕсли;

	Возврат СвязаннаяЗаявка;
	  
КонецФункции	

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаЗатраты" Тогда 
		ПриСменеСтраницыЗатратыНаСервере();
		Элементы.тВсегоЗатрат.Заголовок = "Всего затрат: "+Затраты.Итог("Сумма");
	иначеЕсли ТекущаяСтраница.Имя = "СтраницаСвязанныеЗаявки" Тогда
		ПриСменеСтраницыСвязанныеЗаявкиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСвязанныйЗаказПриИзменении(Элемент)
	Если Объект.ЕстьСвязанныйЗаказ Тогда 
		ОткрытьФорму("Документ.Заявка.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ЕстьСвязанныйЗаказПриИзмененииПослеВыбора", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		Объект.СвязанныйЗаказ = Неопределено;		
	КонецЕсли;	
	Элементы.СвязанныйЗаказ.Видимость = Объект.ЕстьСвязанныйЗаказ;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСвязанныйЗаказПриИзмененииПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Объект.ЕстьСвязанныйЗаказ = Ложь;
	иначе		
		Если Результат = Объект.Ссылка Тогда 	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выбран текущий документ!
			|Выберите другой!";
			Сообщение.Сообщить();
			Объект.ЕстьСвязанныйЗаказ = Ложь;
		Иначе 
			Объект.СвязанныйЗаказ = Результат;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	массив = ОбщегоНазначенияВызовСервера.РазложитьСтрокуВМассивПодстрок(Объект.Номер,"-");
	записьРег = РегистрыСведений.ЗначениеНомераГруппы.СоздатьМенеджерЗаписи();
	записьРег.Префикс 	= массив.получить(0);
	записьРег.Номер	 	= массив.получить(1);
	записьРег.Группа 	= массив.получить(2);
	Попытка
		записьРег.Передел  = массив.получить(3);
	Исключение
		записьРег.Передел  = 0;
	КонецПопытки;
	записьРег.Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСторонПриИзменении(Элемент)
	РасчитатьОбщуюПлощадьИзображения();
КонецПроцедуры

&НаКлиенте
Процедура ТиражПриИзменении(Элемент)
	РасчитатьОбщуюПлощадьИзображения();
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьИзображенияПриИзменении(Элемент)
	РасчитатьОбщуюПлощадьИзображения();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостиЦенаДляКлиентаПриИзменении(Элемент)
	Если Не Объект.НулеваяЦена Тогда 
		Объект.ИтогоЗаВесьЗаказ = Объект.Стоимости.Итог("ЦенаДляКлиента");
		РасчитатьЗаМетрКвИзображения();
		РасчитатьЗаЭкземплярИзображения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура  РасчитатьЗаМетрКвИзображения()	
	Если Объект.ОбщаяПлощадьИзображения>0 Тогда 
		Объект.ЦенаЗаКвМетр = Объект.ИтогоЗаВесьЗаказ/Объект.ОбщаяПлощадьИзображения;
	Иначе 
		Объект.ЦенаЗаКвМетр = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура  РасчитатьЗаЭкземплярИзображения()	
	Если Объект.ОбщаяПлощадьИзображения>0 Тогда 
		Объект.ЦенаЗаЭкземпляр = Объект.ИтогоЗаВесьЗаказ/Объект.Тираж;
	Иначе 
		Объект.ЦенаЗаЭкземпляр = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИтогоЗаВесьЗаказПриИзменении(Элемент)
	РасчитатьЗаМетрКвИзображения();
	РасчитатьЗаЭкземплярИзображения();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостиРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучениеСписков.ВидовСтоимости(Объект.ВидРабот);
	
	Если Строка(Объект.ВидРабот)="Плотерная резка" Тогда 
		Если Объект.ВыборкаПлотернаяРезка = Ложь Тогда 
			Структура = Новый Структура;
			Структура.Вставить("СписокЗначений",ДанныеВыбора);
			Структура.Вставить("Вид","Выборка");
			инд = ПолучитьИндексДанныхВыбора(Структура);
			Если инд<>Неопределено Тогда 
				ДанныеВыбора.Удалить(инд);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.МонтажкаПлотернаяРезка = Ложь Тогда 
			Структура = Новый Структура;
			Структура.Вставить("СписокЗначений",ДанныеВыбора);
			Структура.Вставить("Вид","Монтажка");
			инд = ПолучитьИндексДанныхВыбора(Структура);
			Если инд<>Неопределено Тогда 
				ДанныеВыбора.Удалить(инд);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИндексДанныхВыбора(Структура)
	
	инд = Неопределено;
	эл 	= Структура.СписокЗначений.НайтиПоЗначению(Перечисления.РаботыСтоимости[Структура.Вид]);
	инд = Структура.СписокЗначений.Индекс(эл);	
	
	Возврат инд;
	
КонецФункции	

&НаКлиенте
Процедура ФайлыИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФайла.Фильтр = "Все файлы (*.*)|*.*";
	Если ДиалогФайла.Выбрать() Тогда
		Элементы.Файлы.ТекущиеДанные.ИмяФайла = СтрЗаменить(ДиалогФайла.ПолноеИмяФайла, ДиалогФайла.Каталог+"\", "");
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//текСтрока = Затраты.Получить(ВыбраннаяСтрока); ошибку вызывает
	текСтрока = Элементы.Затраты.ТекущиеДанные;
	Парам = новый Структура;
	Парам.вставить("Ключ",текСтрока.РКО);
	Если ТипЗнч(текСтрока.РКО) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта",парам);
	ИначеЕсли ТипЗнч(текСтрока.РКО) = Тип("ДокументСсылка.ПрочиеЗатраты") Тогда
		ОткрытьФорму("Документ.ПрочиеЗатраты.ФормаОбъекта",парам);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение(Элементы.Файлы.ТекущиеДанные.ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	Попытка
		ТелКонтактногоЛица = Объект.КонтактноеЛицо.Телефон;
	Исключение
		ТелКонтактногоЛица = "";
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	Если Строка(Объект.ФормаОплаты)="По сверке" Тогда 
		Элементы.Период.Видимость = Истина;
	Иначе 
		Элементы.Период.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучениеСписков.АдресовДоставкиПоКонтрагенту(Объект.Контрагент);
КонецПроцедуры




